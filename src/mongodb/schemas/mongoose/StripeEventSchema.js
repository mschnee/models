const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const stripeEventSchema = new Schema({
  id: { type: String, required: true, index: true, unique: true },
  object: { type: String, default: null },
  api_version: { type: String, default: null },
  created: { type: Date, default: '' }, //stripe created date. converted from epoch
  created_at: { type: Date, default: '' }, //date inserted
  type: { type: String, default: null },
  livemode: { type: Boolean, default: false },
  pending_webhooks: { type: Number, default: 0 },
  request: { type: String, default: null },
  data: {
    object: {
      id: { type: String, default: null },
      object: { type: String, default: null },
      amount: { type: Number, default: 0 },
      amount_refunded: { type: Number, default: 0 },
      application: { type: String, default: null },
      application_fee: { type: String, default: null },
      application_fee_amount: { type: String, default: null },
      balance_transaction: { type: String, default: null },
      canceled_at: { type: Number, default: 0 },
      captured: { type: Boolean, default: false },
      created: { type: Number, default: 0, index: true },
      currency: { type: String, default: null },
      customer: { type: String, default: null, index: true },
      description: { type: String, default: null },
      destination: { type: String, default: null },
      dispute: { type: String, default: null },
      failure_code: { type: String, default: null },
      failure_message: { type: String, default: null },
      invoice: { type: String, default: null },
      livemode: { type: Boolean, default: false },
      on_behalf_of: { type: Boolean, default: false },
      order: { type: Boolean, default: false },
      outcome: {
        network_status: { type: String, default: null },
        reason: { type: String, default: null },
        risk_level: { type: String, default: null },
        risk_score: { type: String, default: null },
        type: { type: String, default: null },
      },
      paid: { type: Boolean, default: false },
      payment_intent: { type: String, default: null },
      receipt_email: { type: String, default: null },
      receipt_number: { type: String, default: null },
      receipt_url: { type: String, default: null },
      refunded: { type: String, default: null },
      refunds: {
        object: { type: String, default: null },
        data: [],
        has_more: { type: Boolean, default: false },
        total_count: { type: Number, default: 0 },
        url: { type: String, default: null },
      },
      review: { type: String, default: null },
      shipping: { type: String, default: null },
      sources: {
        id: { type: String, default: null },
        object: { type: String, default: null },
        address_city: { type: String, default: null },
        address_country: { type: String, default: null },
        address_line1: { type: String, default: null },
        address_line1_check: { type: String, default: null },
        address_line2: { type: String, default: null },
        address_state: { type: String, default: null },
        address_zip: { type: String, default: null },
        address_zip_check: { type: String, default: null },
        brand: { type: String, default: null },
        country: { type: String, default: null },
        customer: { type: String, default: null },
        cvc_check: { type: String, default: null },
        dynamic_last4: { type: String, default: null },
        exp_month: { type: String, default: null },
        exp_year: { type: String, default: null },
        fingerprint: { type: String, default: null },
        funding: { type: String, default: null },
        last4: { type: String, default: null },
        metadata: Schema.Types.Mixed,
        name: { type: String, default: null },
        tokenization_method: { type: String, default: null },
      },
      source_transfer: { type: String, default: null },
      statement_descriptor: { type: String, default: null },
      transfer_data: { type: String, default: null },
      transfer_group: { type: String, default: null },
    },
  },
});

module.exports = stripeEventSchema;
